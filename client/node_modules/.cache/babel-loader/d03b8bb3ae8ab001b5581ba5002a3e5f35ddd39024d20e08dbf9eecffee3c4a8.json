{"ast":null,"code":"var _jsxFileName = \"D:\\\\program project\\\\React Django\\\\imageupload\\\\client\\\\src\\\\dump.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ImageCrop } from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyImageCrop() {\n  _s();\n  const [crop, setCrop] = useState({\n    aspect: 16 / 9\n  });\n  const [imageSrc, setImageSrc] = useState(null);\n  const handleImageChange = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = () => {\n      setImageSrc(reader.result);\n    };\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  };\n  const handleCropChange = newCrop => {\n    setCrop(newCrop);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleImageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), imageSrc && /*#__PURE__*/_jsxDEV(ImageCrop, {\n      src: imageSrc,\n      crop: crop,\n      onChange: handleCropChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(MyImageCrop, \"KlvfUDlEsRgzYOWy9kqnLLMHR5A=\");\n_c = MyImageCrop;\nvar _c;\n$RefreshReg$(_c, \"MyImageCrop\");","map":{"version":3,"names":["React","useState","ImageCrop","jsxDEV","_jsxDEV","MyImageCrop","_s","crop","setCrop","aspect","imageSrc","setImageSrc","handleImageChange","e","file","target","files","reader","FileReader","onload","result","readAsDataURL","handleCropChange","newCrop","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","src","_c","$RefreshReg$"],"sources":["D:/program project/React Django/imageupload/client/src/dump.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { ImageCrop } from \"react-image-crop\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\n\r\nfunction MyImageCrop() {\r\n  const [crop, setCrop] = useState({ aspect: 16 / 9 });\r\n  const [imageSrc, setImageSrc] = useState(null);\r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => {\r\n      setImageSrc(reader.result);\r\n    };\r\n\r\n    if (file) {\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleCropChange = (newCrop) => {\r\n    setCrop(newCrop);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleImageChange} />\r\n      {imageSrc && (\r\n        <ImageCrop src={imageSrc} crop={crop} onChange={handleCropChange} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,qCAAqC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC;IAAEQ,MAAM,EAAE,EAAE,GAAG;EAAE,CAAC,CAAC;EACpD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMW,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAG,MAAM;MACpBR,WAAW,CAACM,MAAM,CAACG,MAAM,CAAC;IAC5B,CAAC;IAED,IAAIN,IAAI,EAAE;MACRG,MAAM,CAACI,aAAa,CAACP,IAAI,CAAC;IAC5B;EACF,CAAC;EAED,MAAMQ,gBAAgB,GAAIC,OAAO,IAAK;IACpCf,OAAO,CAACe,OAAO,CAAC;EAClB,CAAC;EAED,oBACEnB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAOqB,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEd;IAAkB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACjDpB,QAAQ,iBACPN,OAAA,CAACF,SAAS;MAAC6B,GAAG,EAAErB,QAAS;MAACH,IAAI,EAAEA,IAAK;MAACmB,QAAQ,EAAEJ;IAAiB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACpE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACxB,EAAA,CA7BQD,WAAW;AAAA2B,EAAA,GAAX3B,WAAW;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}